@use '@angular/material' as mat;
@import './breadcrumb-variables';

@mixin _ngm-breadcrumb-height($height) {
  $counter: calc(#{$height} / 2);
  .mat-tab-link-container {
    height: $height;
    .mat-tab-link {
      min-width: calc(#{$height} * 2);
    }
  }
  .breadcrumb__step {
    line-height: $height;
    padding: 0 10px 0 calc(#{$height} * 2);
    &::before {
      left: $height;
      width: $counter;
      height: $counter;
      line-height: $counter;
      margin: calc((#{$height} - #{$counter}) / 2) 0;
    }
    &::after {
      right: calc(#{$height} / -2);
      width: $height;
      height: $height;
    }
    &:first-child {
      padding-left: calc(#{$height} * 3 / 2);
      &::before {
        left: calc(#{$height} / 2);
      }
    }
    &:last-child {
      padding-right: calc(#{$height} / 2);
    }
  }
}

@mixin color($config-or-theme) {
  $config: mat.get-color-config($config-or-theme);
  $foreground: map-get($config, foreground);
  $primary: map-get($config, primary);

  $step-background: map-get(map-get($config, background), background);
  $step-active-background: map-get($primary, 300);
  $step-hover-background: map-get($primary, 400);
  $step-color: mat.get-color-from-palette(map-get($config, background), darker); // map-get(map-get($config, foreground), text);
  $step-active-color: mat.get-color-from-palette($primary, '500-contrast'); // map-get(map-get($config, foreground), text);
  $step-divider-color: map-get(map-get($config, accent), 500);

  ngm-breadcrumb-bar {
    &:not(.disabled) {
      .breadcrumb__step {
        cursor: pointer;
      }
    }
    
    .breadcrumb.mat-tab-header {
      display: flex;
      counter-reset: flag;
      transition: transform 500ms cubic-bezier(0.35, 0, 0.25, 1);
    }
    .breadcrumb__step {
      text-decoration: none;
      outline: none;
      display: inline-flex;
      float: left;
      font-size: 12px;
      position: relative;
      background: $step-background;
      color: $step-color;
      transition: background 0.5s;

      &:last-child {
        &::after {
          content: none;
        }
      }
      &::before {
        content: counter(flag);
        counter-increment: flag;
        border-radius: 100%;
        position: absolute;
        top: 0;
        font-weight: bold;
        box-shadow: 0 0 0 1px;
      }
      &::after {
        content: '';
        position: absolute;
        top: 0;
        transform: scale(0.707) rotate(45deg);
        z-index: 1;
        border-radius: 0 5px 0 50px;
        background: $step-background;
        transition: background 0.5s;
        box-shadow: 2px -2px 0 2px $step-divider-color;
      }
      &.breadcrumb__step--active {
        color: $step-active-color;
        background: $step-active-background;
        &::after {
          background: $step-active-background;
        }
      }

      &:hover {
        color: $step-active-color;
        background: $step-hover-background;
        &::after {
          color: $step-color;
          background: $step-hover-background;
        }
      }
    }
  }
}

@mixin density($config-or-theme) {
  .ngm-breadcrumb-bar {
    @include _ngm-breadcrumb-height(36px);
  }
  .ngm-breadcrumb-bar.ngm-density__cosy {
    @include _ngm-breadcrumb-height(30px);
  }
  .ngm-breadcrumb-bar.ngm-density__compact {
    @include _ngm-breadcrumb-height(24px);
  }
}

@mixin theme($theme) {
  $color: mat.get-color-config($theme);
  $density: mat.get-density-config($theme);
  $typography: mat.get-typography-config($theme);

  @if $color != null {
    @include color($color);
  }
  @if $density != null {
    @include density($density);
  }
  @if $typography != null {
    @include typography($typography);
  }
}
